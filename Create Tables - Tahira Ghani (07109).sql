DROP TABLE LOGIN_LOG CASCADE CONSTRAINTS;
DROP TABLE ORDER_LINE CASCADE CONSTRAINTS;
DROP TABLE INV_RECEIPT CASCADE CONSTRAINTS;
DROP TABLE PRODUCTS CASCADE CONSTRAINTS;
DROP TABLE INVOICES CASCADE CONSTRAINTS;
DROP TABLE RECEIPTS CASCADE CONSTRAINTS;
DROP TABLE ORDERS CASCADE CONSTRAINTS;
DROP TABLE CUSTOMERS CASCADE CONSTRAINTS;
DROP TABLE RECEIVABLES;
DROP TABLE USERS CASCADE CONSTRAINTS;
DROP TABLE CREDIT_NOTES CASCADE CONSTRAINTS;
DROP TABLE DEBIT_NOTES CASCADE CONSTRAINTS;

DROP SEQUENCE USERSID_EMP_SEQUENCE;
DROP SEQUENCE USERSID_CUST_SEQUENCE;
DROP SEQUENCE USERSID_ADMIN_SEQUENCE;
DROP SEQUENCE RECEIVABLES_SEQUENCE;
DROP SEQUENCE RECEIPTS_SEQUENCE;
DROP SEQUENCE INVOICES_SEQUENCE;
DROP SEQUENCE ORDERS_SEQUENCE;
DROP SEQUENCE PRODUCTS_SEQUENCE;
DROP SEQUENCE CREDITNOTE_SEQUENCE;
DROP SEQUENCE DEBITNOTE_SEQUENCE;

CREATE TABLE USERS
(USER_ID NUMBER(6) CONSTRAINT users_pk PRIMARY KEY,
 UFNAME VARCHAR2(25),
 ULNAME VARCHAR2(25),
 UPHONE VARCHAR2(11),
 UEMAIL VARCHAR2(30),
 UTYPE VARCHAR2(10) CONSTRAINT user_type CHECK (UPPER(UTYPE) IN ('ADMIN', 'CUSTOMER', 'EMPLOYEE')),
 USTART_DATE DATE,
 USTATUS VARCHAR2(15) CONSTRAINT user_status CHECK (UPPER(USTATUS) IN ('ACTIVE', 'INACTIVE')),
 ULOG_COUNT NUMBER(1) CONSTRAINT user_logCount CHECK (ULOG_COUNT <= 3),
 ULOCK VARCHAR2(8) CONSTRAINT user_lock CHECK (UPPER(ULOCK) IN ('LOCKED', 'UNLOCKED')),
 UEND_DATE DATE,
 UPASSWORD VARCHAR2(6),
 UCREATED_BY NUMBER(6) REFERENCES USERS(USER_ID),
 UCREATED_DATE DATE,
 UMODIFIED_BY NUMBER(6) REFERENCES USERS(USER_ID),
 UMODIFIED_DATE DATE);

CREATE TABLE LOGIN_LOG
(USER_ID NUMBER(5) REFERENCES USERS(USER_ID),
 LOG_DATE DATE,
 LOG_STATUS VARCHAR2(8) CONSTRAINT loginlog_status CHECK (UPPER(LOG_STATUS) IN ('SUCCESS', 'FAILURE', 'BLOCKED')),
 CONSTRAINT loginlog_pk PRIMARY KEY(USER_ID, LOG_DATE));

CREATE TABLE RECEIVABLES
(RECV_ID NUMBER(5) CONSTRAINT receivables_pk PRIMARY KEY,
 AMT_OWED NUMBER(10),
 DATE_UPDATED DATE);

--CREATE TABLE EMPLOYEES
--(EMP_ID NUMBER(6) REFERENCES USERS(USER_ID) CONSTRAINT employees_pk PRIMARY KEY,
 --EMP_TYPE VARCHAR(10) CONSTRAINT employees_type CHECK(UPPER(EMP_TYPE) IN ('FINANCE', 'SALES')));

CREATE TABLE CUSTOMERS
(CUST_ID NUMBER(6) REFERENCES USERS(USER_ID) CONSTRAINT customers_pk PRIMARY KEY,
 RECV_ID NUMBER(5) REFERENCES RECEIVABLES(RECV_ID));

CREATE TABLE RECEIPTS
(R_ID NUMBER(5) CONSTRAINT receipts_pk PRIMARY KEY,
 CUST_ID NUMBER(6) REFERENCES USERS(USER_ID),
 RAMOUNT_PAID NUMBER(10),
 RCREATED_BY NUMBER(6) REFERENCES USERS(USER_ID),
 RCREATED_DATE DATE);

CREATE TABLE ORDERS
(ORD_ID NUMBER(5) CONSTRAINT orders_pk PRIMARY KEY,
 ORD_DATE DATE,
 ORD_COST NUMBER(10),
 CUST_ID NUMBER(6) REFERENCES USERS(USER_ID),
 ORD_STATUS VARCHAR(8) CONSTRAINT order_status CHECK(ORD_STATUS IN ('APPROVED', 'PENDING')),
 OCREATED_BY NUMBER(6) REFERENCES USERS(USER_ID),
 OCREATED_DATE DATE,
 OMODIFIED_BY NUMBER(6) REFERENCES USERS(USER_ID),
 OMODIFIED_DATE DATE);

CREATE TABLE INVOICES
(INV_ID NUMBER(5) CONSTRAINT invoices_pk PRIMARY KEY,
 CUST_ID NUMBER(6) REFERENCES USERS(USER_ID),
 INV_DATE DATE,
 INV_AMOUNT_DUE NUMBER(10),
 INV_REMAINING_BALANCE NUMBER(10),
 ORD_ID NUMBER(5) REFERENCES ORDERS(ORD_ID),
 ICREATED_BY NUMBER(6) REFERENCES USERS(USER_ID),
 ICREATED_DATE DATE,
 IMODIFIED_BY NUMBER(6) REFERENCES USERS(USER_ID),
 IMODIFIED_DATE DATE);
 
CREATE TABLE INV_RECEIPT
(R_ID NUMBER(5) REFERENCES RECEIPTS(R_ID),
 INV_ID NUMBER(5) REFERENCES INVOICES(INV_ID),
 AMOUNT_PAID NUMBER(10),
 CONSTRAINT inv_receipt_pk PRIMARY KEY(R_ID, INV_ID));

CREATE TABLE DNOTE_RECEIPT
(R_ID NUMBER(5) REFERENCES RECEIPTS(R_ID),
 D_ID NUMBER(5) REFERENCES DEBIT_NOTES(D_ID),
 AMOUNT_PAID NUMBER(10),
 CONSTRAINT dnote_receipt_pk PRIMARY KEY(R_ID, D_ID));

CREATE TABLE PRODUCTS
(PROD_ID NUMBER(5) CONSTRAINT products_pk PRIMARY KEY,
 PNAME VARCHAR(25),
 PRATE NUMBER(6),
 PSTATUS VARCHAR2(15) CONSTRAINT product_status CHECK (UPPER(PSTATUS) IN ('ACTIVE', 'INACTIVE')),
 PDESC VARCHAR2(250),
 PCREATED_BY NUMBER(6) REFERENCES USERS(USER_ID),
 PCREATED_DATE DATE,
 PMODIFIED_BY NUMBER(6) REFERENCES USERS(USER_ID),
 PMODIFIED_DATE DATE);

CREATE TABLE ORDER_LINE
(ORD_ID NUMBER(5) REFERENCES ORDERS(ORD_ID),
 PROD_ID NUMBER(5) REFERENCES PRODUCTS(PROD_ID),
 OL_RATE NUMBER(6),
 OL_QTY NUMBER(3),
 OL_COST NUMBER(5),
 CONSTRAINT order_line_pk PRIMARY KEY(ORD_ID, PROD_ID));

CREATE TABLE CREDIT_NOTES
(CR_ID NUMBER(5) CONSTRAINT credit_note_pk PRIMARY KEY,
 CUST_ID NUMBER(6) REFERENCES USERS(USER_ID),
 CR_AMOUNT NUMBER(10),
 CR_STATUS VARCHAR(8) CONSTRAINT crednote_status CHECK(CR_STATUS IN ('PENDING', 'APPROVED', 'REJECTED')),
 CRCREATED_BY NUMBER(6) REFERENCES USERS(USER_ID),
 CRCREATED_DATE DATE,
 CRMODIFED_BY NUMBER(6) REFERENCES USERS(USER_ID),
 CRMODIFIED_DATE DATE);
ALTER TABLE CREDIT_NOTES
 ADD CR_DESC VARCHAR2(500);

CREATE TABLE DEBIT_NOTES
(D_ID NUMBER(5) CONSTRAINT debit_note_pk PRIMARY KEY,
 CUST_ID NUMBER(6) REFERENCES USERS(USER_ID),
 D_AMOUNT NUMBER(10),
 DCREATED_BY NUMBER(6) REFERENCES USERS(USER_ID),
 DCREATED_DATE DATE,
 DMODIFIED_BY NUMBER(6) REFERENCES USERS(USER_ID),
 DMODIFIED_DATE DATE);
ALTER TABLE DEBIT_NOTES
 ADD D_DESC VARCHAR2(500);
ALTER TABLE DEBIT_NOTES
 ADD D_AMT_REMAINING NUMBER(10);

CREATE SEQUENCE USERSID_ADMIN_SEQUENCE START WITH 000001 INCREMENT BY 1;
CREATE SEQUENCE USERSID_EMP_SEQUENCE START WITH 000100 INCREMENT BY 1;
CREATE SEQUENCE USERSID_CUST_SEQUENCE START WITH 010000 INCREMENT BY 1;
CREATE SEQUENCE RECEIVABLES_SEQUENCE START WITH 12347 INCREMENT BY 1;
CREATE SEQUENCE RECEIPTS_SEQUENCE START WITH 30942 INCREMENT BY 1;
CREATE SEQUENCE ORDERS_SEQUENCE START WITH 59843 INCREMENT BY 1;
CREATE SEQUENCE INVOICES_SEQUENCE START WITH 45763 INCREMENT BY 1;
CREATE SEQUENCE PRODUCTS_SEQUENCE START WITH 21468 INCREMENT BY 1;
CREATE SEQUENCE CREDITNOTE_SEQUENCE START WITH 64523 INCREMENT BY 1;
CREATE SEQUENCE DEBITNOTE_SEQUENCE START WITH 73643 INCREMENT BY 1;


CREATE OR REPLACE PROCEDURE DEBITNOTE_ALL (VAMOUNT IN NUMBER, VREASON IN VARCHAR, VCREATED_BY IN NUMBER)
 AS
 CURSOR C1 IS SELECT CUST_ID FROM CUSTOMERS;
 C1REC C1%ROWTYPE;

BEGIN
  OPEN C1;
  LOOP
    FETCH C1 INTO C1REC;
    EXIT WHEN C1%NOTFOUND;
    INSERT INTO DEBIT_NOTES(D_ID,CUST_ID,D_AMOUNT,D_DESC,DCREATED_BY,DCREATED_DATE) VALUES(DEBITNOTE_SEQUENCE.NEXTVAL,C1REC.CUST_ID,VAMOUNT,VREASON,VCREATED_BY,SYSDATE);
    UPDATE RECEIVABLES SET AMT_OWED = AMT_OWED+VAMOUNT WHERE RECV_ID = (SELECT RECV_ID FROM CUSTOMERS C INNER JOIN USERS U ON C.CUST_ID = U.USER_ID WHERE U.USTATUS = 'ACTIVE' AND C.CUST_ID=C1REC.CUST_ID);
  END LOOP;
  COMMIT;
END;

